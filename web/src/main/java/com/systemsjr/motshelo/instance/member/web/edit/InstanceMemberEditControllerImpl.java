// license-header java merge-point
// Generated by andromda-jsf cartridge (controllers\ControllerImpl.java.vsl)
package com.systemsjr.motshelo.instance.member.web.edit;

import java.util.ArrayList;
import java.util.Collection;

import javax.faces.application.FacesMessage;
import javax.faces.application.FacesMessage.Severity;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import com.systemsjr.motshelo.JsfUtils;
import com.systemsjr.motshelo.instance.member.vo.InstanceMemberVO;
import com.systemsjr.motshelo.instance.vo.MotsheloInstanceVO;
import com.systemsjr.motshelo.loan.LoanType;
import com.systemsjr.motshelo.loan.vo.LoanVO;
import com.systemsjr.motshelo.member.vo.MemberVO;
import com.systemsjr.motshelo.vo.MotsheloVO;

/**
 * @see com.systemsjr.motshelo.instance.member.web.edit.InstanceMemberEditController
 */
public class InstanceMemberEditControllerImpl extends InstanceMemberEditController {
	/**
	 * The serial version UID of this class. Needed for serialization.
	 */
	private static final long serialVersionUID = 3025785027924407078L;

	/**
	 * @see com.systemsjr.motshelo.instance.member.web.edit.InstanceMemberEditController#doSaveInstanceMember()
	 */
	@Override
	public void doSaveInstanceMember() {
		InstanceMemberVO member = getEditInstanceMemberSaveForm().getInstanceMemberVO();

    	Severity severity = FacesMessage.SEVERITY_INFO;
    	String summary = "SUCCESS: ";
    	String details = "Instance member saved.";
    	if(member.getId() == null)
    	{
    		severity = FacesMessage.SEVERITY_ERROR;
        	summary = "ERROR: ";
        	details = "Instance member could not be saved.";
    	}
    	FacesContext.getCurrentInstance().addMessage("messages", new FacesMessage(severity, summary, details));
    	
		member = getInstanceMemberService().saveInstanceMember(member);
		JsfUtils.getFlash().put("instanceMemberVO", member);
	}

	/**
	 * @see com.systemsjr.motshelo.instance.member.web.edit.InstanceMemberEditController#doNewInstanceMember()
	 */
	@Override
	public void doNewInstanceMember() {
		InstanceMemberVO member = new InstanceMemberVO();
		JsfUtils.getFlash().put("instanceMemberVO", member);
	}

	/**
	 * @see com.systemsjr.motshelo.instance.member.web.edit.InstanceMemberEditController#doInitialiseEditScreen(InstanceMemberVO
	 *      instanceMemberVO)
	 */
	@Override
	public void doInitialiseEditScreen(DoInitialiseEditScreenForm form) {
		
		InstanceMemberVO member = (InstanceMemberVO) JsfUtils.getFlash().get("instanceMemberVO");
		if(member == null)
		{
			member = form.getInstanceMemberVO();
		}
		form.setInstanceMemberVO(member);
		getEditInstanceMemberSaveForm().setInstanceMemberVO(member);
		if(member.getMember() == null)
		{
			member.setMember(new MemberVO());
		}

		if(member.getMotsheloInstance() == null)
		{
			member.setMotsheloInstance(new MotsheloInstanceVO());
		}

		Collection<SelectItem> motsheloInstanceBackingList = new ArrayList<SelectItem>();
		for(MotsheloInstanceVO instance : getMotsheloInstanceService().getAllMotsheloInstances())
		{
			motsheloInstanceBackingList.add(new SelectItem(instance.getId(), instance.getInstanceName()));
		}

		form.setInstanceMemberVOMotsheloInstanceBackingList(motsheloInstanceBackingList);
		getEditInstanceMemberSaveForm().setInstanceMemberVOMotsheloInstanceBackingList(motsheloInstanceBackingList);
		
		Collection<LoanVO> contributions = new ArrayList<LoanVO>();
    	Collection<LoanVO> others = new ArrayList<LoanVO>();
		for(LoanVO lv : member.getLoans())
		{
    		if(lv.getType() == LoanType.CONTRIBUTION)
    		{
    			contributions.add(lv);
    		} else {
    			others.add(lv);
    		}
		}
		
		try {
			updateEditForm();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		
    	JsfUtils.getFlash().put("loans", others);
    	JsfUtils.getFlash().put("contributions", contributions);
    	JsfUtils.getFlash().put("transactions", member.getTransactions());
	}

	/**
	 * @see com.systemsjr.motshelo.instance.member.web.edit.InstanceMemberEditController#doAddTransaction(MemberVO
	 *      member)
	 */
	@Override
	public void doAddTransaction(DoAddTransactionForm form) {

	}

	/**
	 * @see com.systemsjr.motshelo.instance.member.web.edit.InstanceMemberEditController#doAddLoan()
	 */
	@Override
	public void doAddLoan() {
	}

	/**
	 * @see com.systemsjr.motshelo.instance.member.web.edit.InstanceMemberEditController#updateInstanceMember()
	 */
	@Override
	public void updateInstanceMember() {
	}

	@Override
	public void updateEditForm() throws Throwable {
		
		InstanceMemberVO instanceMemberVO = getEditInstanceMemberSaveForm().getInstanceMemberVO();
		
		if(instanceMemberVO.getMotsheloInstance() != null && instanceMemberVO.getMotsheloInstance().getId() != null) {
			MotsheloInstanceVO instance = getMotsheloInstanceService().findById(instanceMemberVO.getMotsheloInstance().getId());
			MotsheloVO motshelo = getMotsheloService().findById(instance.getMotshelo().getId());
			Collection<SelectItem> memberBackingList = new ArrayList<SelectItem>();
			for(MemberVO member : motshelo.getMembers())
			{
				memberBackingList.add(new SelectItem(member.getId(), member.getName() + " " + member.getSurname()));
			}
			
			getEditInstanceMemberSaveForm().setInstanceMemberVOMemberBackingList(memberBackingList);
		}
	}
	
	//public void exportPdf(Map<String, Object> params, String jasperPath, List<?> dataSource, String fileName) throws JRException, IOException {
		
		/*String relativeWebPath = FacesContext.getCurrentInstance().getExternalContext().getRealPath(jasperPath);
		File file = new File(relativeWebPath);
		JRBeanCollectionDataSource source = new JRBeanCollectionDataSource(dataSource, false);
		JasperPrint print = JasperFillManager.fillReport(file.getPath(), params, source);
		HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();
		response.addHeader("Content-disposition", "attachment;filename=" + fileName);
		ServletOutputStream stream = response.getOutputStream();
		JasperExportManager.exportReportToPdfStream(print, stream);
		FacesContext.getCurrentInstance().responseComplete();*/
	//}

	@Override
	public void printInstanceMember() throws Throwable {
		//MotsheloPrintController printController = (MotsheloPrintController) FacesContext.getCurrentInstance().getExternalContext().getRequestMap().get("motsheloPrintController");
		/*List<InstanceMemberVO> list = new ArrayList<>();
		list.add(getEditInstanceMemberSaveForm().getInstanceMemberVO());
		String filename = "instance_members.pdf";
		String jasperPath = "/resources/reports/sources";
		this.exportPdf(null, jasperPath, list, filename);*/
	}

	@Override
	public void doUpdateInstanceMemberBalance() throws Throwable {
		// TODO Auto-generated method stub
		InstanceMemberVO instanceMemberVO = getInstanceMemberService().updateMemberBalance(getEditInstanceMemberSaveForm().getInstanceMemberVO());
		Severity severity = FacesMessage.SEVERITY_INFO;
    	String summary = "SUCCESS: ";
    	String details = "Instance member balanse updated.";
    	if(instanceMemberVO.getId() == null)
    	{
    		severity = FacesMessage.SEVERITY_ERROR;
        	summary = "ERROR: ";
        	details = "Instance member balance could not be updated.";
    	}
    	FacesContext.getCurrentInstance().addMessage("messages", new FacesMessage(severity, summary, details));
    	JsfUtils.getFlash().put("instanceMemberVO", instanceMemberVO);
	}

}
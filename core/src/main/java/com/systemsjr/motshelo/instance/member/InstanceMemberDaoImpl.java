// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 12/21/2018 07:41:10+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.motshelo.instance.member;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;
import org.springframework.util.CollectionUtils;

import com.systemsjr.motshelo.instance.member.vo.InstanceMemberSearchCriteria;
import com.systemsjr.motshelo.instance.member.vo.InstanceMemberVO;
import com.systemsjr.motshelo.instance.vo.MotsheloInstanceVO;
import com.systemsjr.motshelo.loan.Loan;
import com.systemsjr.motshelo.loan.vo.LoanVO;
import com.systemsjr.motshelo.member.vo.MemberVO;
import com.systemsjr.motshelo.transaction.Transaction;
import com.systemsjr.motshelo.transaction.vo.TransactionVO;

/**
 * @see InstanceMember
 */
@Repository
public class InstanceMemberDaoImpl
    extends InstanceMemberDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toInstanceMemberVO(
        InstanceMember source,
        InstanceMemberVO target)
    {
        // TODO verify behavior of toInstanceMemberVO
        super.toInstanceMemberVO(source, target);
        // WARNING! No conversion for target.member (can't convert source.getMember():com.systemsjr.motshelo.member.Member to com.systemsjr.motshelo.member.vo.MemberVO
        if(source.getMember() != null)
        {
        	target.setMember(getMemberDao().getBasicMemberVO(source.getMember()));
        }
        
        // WARNING! No conversion for target.loans (can't convert source.getLoans():com.systemsjr.motshelo.loan.Loan to com.systemsjr.motshelo.loan.vo.LoanVO
        target.setLoans(new ArrayList<LoanVO>());
        for(Loan loan : source.getLoans())
        {
        	target.getLoans().add(getLoanDao().getBasicLoanVO(loan));
        }
                
        // WARNING! No conversion for target.motsheloInstance (can't convert source.getMotsheloInstance():com.systemsjr.motshelo.instance.MotsheloInstance to com.systemsjr.motshelo.instance.vo.MotsheloInstanceVO
       
        
        if(source.getMotsheloInstance() != null)
        {
        	target.setMotsheloInstance(getMotsheloInstanceDao().getBasicMotsheloInstanceVO(source.getMotsheloInstance()));
        }
        
        target.setTransactions(new ArrayList<TransactionVO>());
        for(Transaction trans : source.getTransactions())
        {
        	target.getTransactions().add(getTransactionDao().getBasicTransactionVO(trans));
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InstanceMemberVO toInstanceMemberVO(final InstanceMember entity)
    {
        // TODO verify behavior of toInstanceMemberVO
        return super.toInstanceMemberVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private InstanceMember loadInstanceMemberFromInstanceMemberVO(InstanceMemberVO instanceMemberVO)
    {
    	InstanceMember instanceMember = InstanceMember.Factory.newInstance();
        
    	if(instanceMemberVO.getId() != null)
    	{
    		instanceMember = this.load(instanceMemberVO.getId());
    	}
    	
    	return instanceMember;
    }

    /**
     * {@inheritDoc}
     */
    public InstanceMember instanceMemberVOToEntity(InstanceMemberVO instanceMemberVO)
    {
        // TODO verify behavior of instanceMemberVOToEntity
        InstanceMember entity = this.loadInstanceMemberFromInstanceMemberVO(instanceMemberVO);
        this.instanceMemberVOToEntity(instanceMemberVO, entity, true);
        
        if(instanceMemberVO.getMember() != null)
        {
        	entity.setMember(getMemberDao().getBasicMemberEntity(instanceMemberVO.getMember()));
        }
        
        if(instanceMemberVO.getMotsheloInstance() != null)
        {
        	entity.setMotsheloInstance(getMotsheloInstanceDao().load(instanceMemberVO.getMotsheloInstance().getId()));
        }
        
        Collection<LoanVO> loanVOs = instanceMemberVO.getLoans();
        for(LoanVO loanVO : loanVOs)
        {
        	entity.addLoans(getLoanDao().getBasicLoanEntity(loanVO));
        }
        
        Collection<TransactionVO> transactionVOs = instanceMemberVO.getTransactions();
        for(TransactionVO transactionVO : transactionVOs)
        {
        	entity.addTransactions(getTransactionDao().getBasicTransactionEntity(transactionVO));
        }
        
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void instanceMemberVOToEntity(
        InstanceMemberVO source,
        InstanceMember target,
        boolean copyIfNull)
    {
        // TODO verify behavior of instanceMemberVOToEntity
        super.instanceMemberVOToEntity(source, target, copyIfNull);
    }

	@Override
	protected Collection<InstanceMember> handleFindByCriteria(InstanceMemberSearchCriteria searchCriteria)
			throws Exception {
		CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<InstanceMember> query = builder.createQuery(InstanceMember.class);
    	Root<InstanceMember> root = query.from(InstanceMember.class);   
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		/*if(searchCriteria.getName() != null)
		{
			predicates.add(builder.like(root.<String>get("name"), "%" + searchCriteria.getName() + "%"));
		}*/		
		
		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		
		//query.orderBy(builder.asc(root.get("username")));
		TypedQuery<InstanceMember> typedQuery = getSession().createQuery(query);
		return typedQuery.getResultList();
	}

	@Override
	protected InstanceMember handleGetBasicInstanceMemberEntity(InstanceMemberVO instanceMemberVO) throws Exception {
		InstanceMember instance = InstanceMember.Factory.newInstance();
		instance.setId(instanceMemberVO.getId());
		super.instanceMemberVOToEntity(instanceMemberVO, instance, true);
		
		if(instanceMemberVO.getMember() != null) {
			instance.setMember(getMemberDao().getBasicMemberEntity(instanceMemberVO.getMember()));
		}
		
		if(instanceMemberVO.getMotsheloInstance() != null) {
			instance.setMotsheloInstance(getMotsheloInstanceDao().getBasicMotsheloInstanceEntity(instanceMemberVO.getMotsheloInstance()));
		}
		
		return instance;
	}

	@Override
	protected InstanceMemberVO handleGetBasicInstanceMemberVO(InstanceMember instanceMember) throws Exception {
		InstanceMemberVO vo = new  InstanceMemberVO();
		super.toInstanceMemberVO(instanceMember, vo);
		
		if(instanceMember.getMember() != null) {
			vo.setMember(getMemberDao().getBasicMemberVO(instanceMember.getMember()));
		}
		
		if(instanceMember.getMotsheloInstance() != null) {
			vo.setMotsheloInstance(getMotsheloInstanceDao().getBasicMotsheloInstanceVO(instanceMember.getMotsheloInstance()));
		}
		
		return vo;
	}
}
// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 12/19/2018 14:18:00+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.motshelo.instance.period;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

import com.systemsjr.motshelo.instance.MotsheloInstance;
import com.systemsjr.motshelo.instance.period.vo.InstancePeriodSearchCriteria;
import com.systemsjr.motshelo.instance.period.vo.InstancePeriodVO;

/**
 * @see InstancePeriod
 */
@Repository
public class InstancePeriodDaoImpl
    extends InstancePeriodDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<InstancePeriod> handleFindByCriteria(InstancePeriodSearchCriteria searchCriteria)
    {
    	CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<InstancePeriod> query = builder.createQuery(InstancePeriod.class);
    	Root<InstancePeriod> root = query.from(InstancePeriod.class);   
		List<Predicate> predicates = new ArrayList<Predicate>();
		Join<InstancePeriod, MotsheloInstance> join = root.join("motsheloInstance", JoinType.INNER);
		
		if(searchCriteria.getMotsheloInstance() != null && searchCriteria.getMotsheloInstance().getId() != null)
		{
			predicates.add(builder.equal(join.<Long>get("id"), searchCriteria.getMotsheloInstance().getId() ));
		}
    	
		if(searchCriteria.getDate() != null)
		{
			predicates.add(builder.lessThanOrEqualTo(root.<Date>get("startDate"), searchCriteria.getDate()));
			predicates.add(builder.greaterThanOrEqualTo(root.<Date>get("endDate"), searchCriteria.getDate()));
		}
		
		if(searchCriteria.getPeriodName() != null)
		{
			predicates.add(builder.like(root.<String>get("periodName"), "%" + searchCriteria.getPeriodName() + "%"));
		}
		
		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		
		query.orderBy(builder.desc(root.get("loanByDate")));
		TypedQuery<InstancePeriod> typedQuery = getSession().createQuery(query);
		return typedQuery.getResultList();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toInstancePeriodVO(
        InstancePeriod source,
        InstancePeriodVO target)
    {
        // TODO verify behavior of toInstancePeriodVO
        super.toInstancePeriodVO(source, target);
        // WARNING! No conversion for target.motsheloInstance (can't convert source.getMotsheloInstance():com.systemsjr.motshelo.instance.MotsheloInstance to com.systemsjr.motshelo.instance.vo.MotsheloInstanceVO
        if(source.getMotsheloInstance() != null)
        {
        	target.setMotsheloInstance(getMotsheloInstanceDao().getBasicMotsheloInstanceVO(source.getMotsheloInstance()));
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InstancePeriodVO toInstancePeriodVO(final InstancePeriod entity)
    {
        // TODO verify behavior of toInstancePeriodVO
        return super.toInstancePeriodVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private InstancePeriod loadInstancePeriodFromInstancePeriodVO(InstancePeriodVO instancePeriodVO)
    {
    	InstancePeriod instancePeriod = InstancePeriod.Factory.newInstance();
        
        if (instancePeriodVO.getId() != null)
        {
            instancePeriod = this.load(instancePeriodVO.getId());
        }
        
        return instancePeriod;
    }

    /**
     * {@inheritDoc}
     */
    public InstancePeriod instancePeriodVOToEntity(InstancePeriodVO instancePeriodVO)
    {
        // TODO verify behavior of instancePeriodVOToEntity
        InstancePeriod entity = InstancePeriod.Factory.newInstance();
        entity.setId(instancePeriodVO.getId());
        this.instancePeriodVOToEntity(instancePeriodVO, entity, true);
        
        if(instancePeriodVO.getMotsheloInstance() != null)
        {
        	entity.setMotsheloInstance(getMotsheloInstanceDao().getBasicMotsheloInstanceEntity(instancePeriodVO.getMotsheloInstance()));
        }
        
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void instancePeriodVOToEntity(
        InstancePeriodVO source,
        InstancePeriod target,
        boolean copyIfNull)
    {
        // TODO verify behavior of instancePeriodVOToEntity
        super.instancePeriodVOToEntity(source, target, copyIfNull);
    }

	@Override
	protected InstancePeriodVO handleGetBasicInstancePeriodVO(InstancePeriod instancePeriod) throws Exception {
		
		InstancePeriodVO vo = new InstancePeriodVO();
		super.toInstancePeriodVO(instancePeriod, vo);
		if(instancePeriod.getMotsheloInstance() != null)
		{
			vo.setMotsheloInstance(getMotsheloInstanceDao().getBasicMotsheloInstanceVO(instancePeriod.getMotsheloInstance()));
		}
		
		return vo;
	}

	@Override
	protected InstancePeriod handleGetBasicInstancePeriodEntity(InstancePeriodVO instancePeriodVO) throws Exception {
		
		InstancePeriod entity = this.loadInstancePeriodFromInstancePeriodVO(instancePeriodVO);
		super.instancePeriodVOToEntity(instancePeriodVO, entity, true);
		if(instancePeriodVO.getMotsheloInstance() != null)
		{
			entity.setMotsheloInstance(getMotsheloInstanceDao().getBasicMotsheloInstanceEntity(instancePeriodVO.getMotsheloInstance()));
		}
		
		return entity;
	}
}
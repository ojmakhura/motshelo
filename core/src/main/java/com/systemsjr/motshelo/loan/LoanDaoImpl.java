// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 12/10/2018 08:47:25+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.motshelo.loan;

import com.systemsjr.motshelo.interest.Interest;
import com.systemsjr.motshelo.interest.vo.InterestVO;
import com.systemsjr.motshelo.loan.vo.LoanSearchCriteria;
import com.systemsjr.motshelo.loan.vo.LoanVO;
import com.systemsjr.motshelo.transaction.Transaction;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;
import org.springframework.util.CollectionUtils;

/**
 * @see Loan
 */
@Repository
public class LoanDaoImpl
    extends LoanDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toLoanVO(
        Loan source,
        LoanVO target)
    {
        // TODO verify behavior of toLoanVO
        super.toLoanVO(source, target);
        
        
        if(source.getInstanceMember() != null)
        {
        	target.setInstanceMember(getInstanceMemberDao().toInstanceMemberVO(source.getInstanceMember()));
        }
        
        // WARNING! No conversion for target.motshelo (can't convert source.getMotshelo():com.systemsjr.motshelo.Motshelo to com.systemsjr.motshelo.vo.MotsheloVO
        if(source.getMotsheloInstance() != null)
        {
        	target.setMotsheloInstance(getMotsheloInstanceDao().toMotsheloInstanceVO(source.getMotsheloInstance()));
        }
        
        if(!CollectionUtils.isEmpty(source.getInterests()))
        {
        	target.setInterests(getInterestDao().toInterestVOCollection(source.getInterests()));
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoanVO toLoanVO(final Loan entity)
    {
        // TODO verify behavior of toLoanVO
        return super.toLoanVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Loan loadLoanFromLoanVO(LoanVO loanVO)
    {
    	Loan loan = Loan.Factory.newInstance();
    	
    	if(loanVO.getId() != null)
    	{
    		loan = this.load(loanVO.getId());
    	}
    	
    	return loan;
    }

    /**
     * {@inheritDoc}
     */
    public Loan loanVOToEntity(LoanVO loanVO)
    {
        // TODO verify behavior of loanVOToEntity
        Loan entity = this.loadLoanFromLoanVO(loanVO);
        this.loanVOToEntity(loanVO, entity, true);
        
        if(loanVO.getInstanceMember() != null)
        {
        	entity.setInstanceMember(getInstanceMemberDao().load(loanVO.getInstanceMember().getId()));
        }
        
        if(loanVO.getMotsheloInstance() != null)
        {
        	entity.setMotsheloInstance(getMotsheloInstanceDao().load(loanVO.getMotsheloInstance().getId()));
        }
        
        Collection<InterestVO> interests = loanVO.getInterests();        
        for(InterestVO interest : interests)
        {
        	entity.addInterests(getInterestDao().load(interest.getId()));
        }
        
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void loanVOToEntity(
        LoanVO source,
        Loan target,
        boolean copyIfNull)
    {
        // TODO verify behavior of loanVOToEntity
        super.loanVOToEntity(source, target, copyIfNull);
    }

	@Override
	protected Collection<Loan> handleFindByCriteria(LoanSearchCriteria searchCriteria) throws Exception {

		CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<Loan> query = builder.createQuery(Loan.class);
    	Root<Loan> root = query.from(Loan.class);   
		List<Predicate> predicates = new ArrayList<Predicate>();

		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		
		query.orderBy(builder.desc(root.get("startDate")));
		TypedQuery<Loan> typedQuery = getSession().createQuery(query);
		return typedQuery.getResultList();
	}
}
// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 01/01/2019 09:05:34+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.motshelo.loan.payment;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

import com.systemsjr.motshelo.loan.Loan;
import com.systemsjr.motshelo.loan.payment.vo.LoanPaymentSearchCriteria;
import com.systemsjr.motshelo.loan.payment.vo.LoanPaymentVO;
import com.systemsjr.motshelo.transaction.Transaction;

/**
 * @see LoanPayment
 */
@Repository
public class LoanPaymentDaoImpl
    extends LoanPaymentDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<LoanPayment> handleFindByCriteria(LoanPaymentSearchCriteria searchCriteria)
    {
    	CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<LoanPayment> query = builder.createQuery(LoanPayment.class);
    	Root<LoanPayment> root = query.from(LoanPayment.class);   
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		if(searchCriteria.getLoan() != null)
		{
			Join<LoanPayment, Loan> loanJoin = root.join("loan", JoinType.INNER);
			predicates.add(builder.equal(loanJoin.<Long>get("id"), searchCriteria.getLoan().getId()));
		}
		
		if(searchCriteria.getTransaction() != null)
		{
			Join<LoanPayment, Transaction> transactionJoin = root.join("transaction", JoinType.INNER);
			predicates.add(builder.equal(transactionJoin.<Long>get("id"), searchCriteria.getTransaction().getId()));
		}
		
		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
        
		TypedQuery<LoanPayment> typedQuery = getSession().createQuery(query);
		return typedQuery.getResultList();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected LoanPayment handleGetBasicLoanPaymentEntity(LoanPaymentVO loanPaymentVO)
    {
    	LoanPayment loanPayment = LoanPayment.Factory.newInstance();    	
    	loanPayment.setId(loanPaymentVO.getId());
    	super.loanPaymentVOToEntity(loanPaymentVO, loanPayment, true);
    	loanPayment.setLoan(getLoanDao().getBasicLoanEntity(loanPaymentVO.getLoan()));
    	loanPayment.setTransaction(getTransactionDao().getBasicTransactionEntity(loanPaymentVO.getTransaction()));
    	
        return loanPayment;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected LoanPaymentVO handleGetBasicLoanPaymentVO(LoanPayment loanPayment)
    {
    	LoanPaymentVO loanPaymentVO = new LoanPaymentVO();
    	super.toLoanPaymentVO(loanPayment, loanPaymentVO);
    	loanPaymentVO.setLoan(getLoanDao().getBasicLoanVO(loanPayment.getLoan()));
    	loanPaymentVO.setTransaction(getTransactionDao().getBasicTransactionVO(loanPayment.getTransaction()));
    	
        return loanPaymentVO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toLoanPaymentVO(
        LoanPayment source,
        LoanPaymentVO target)
    {
        // TODO verify behavior of toLoanPaymentVO
        super.toLoanPaymentVO(source, target);
        // WARNING! No conversion for target.loan (can't convert source.getLoan():com.systemsjr.motshelo.loan.Loan to com.systemsjr.motshelo.loan.vo.LoanVO
        target.setLoan(getLoanDao().getBasicLoanVO(source.getLoan()));
        // WARNING! No conversion for target.transaction (can't convert source.getTransaction():com.systemsjr.motshelo.transaction.Transaction to com.systemsjr.motshelo.transaction.vo.TransactionVO
        target.setTransaction(getTransactionDao().getBasicTransactionVO(source.getTransaction()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LoanPaymentVO toLoanPaymentVO(final LoanPayment entity)
    {
        // TODO verify behavior of toLoanPaymentVO
        return super.toLoanPaymentVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private LoanPayment loadLoanPaymentFromLoanPaymentVO(LoanPaymentVO loanPaymentVO)
    {
    	LoanPayment loanPayment = LoanPayment.Factory.newInstance();
        
    	if(loanPaymentVO.getId() != null)
    	{
    		loanPayment = this.load(loanPaymentVO.getId());
    	}
    	
    	return loanPayment;
    }

    /**
     * {@inheritDoc}
     */
    public LoanPayment loanPaymentVOToEntity(LoanPaymentVO loanPaymentVO)
    {
        // TODO verify behavior of loanPaymentVOToEntity
        LoanPayment entity = this.loadLoanPaymentFromLoanPaymentVO(loanPaymentVO);
        this.loanPaymentVOToEntity(loanPaymentVO, entity, true);
        
        if(loanPaymentVO.getLoan() != null)
        {
        	entity.setLoan(getLoanDao().getBasicLoanEntity(loanPaymentVO.getLoan()));
        }
        
        if(loanPaymentVO.getTransaction() != null)
        {
        	entity.setTransaction(getTransactionDao().getBasicTransactionEntity(loanPaymentVO.getTransaction()));
        }
        
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void loanPaymentVOToEntity(
        LoanPaymentVO source,
        LoanPayment target,
        boolean copyIfNull)
    {
        // TODO verify behavior of loanPaymentVOToEntity
        super.loanPaymentVOToEntity(source, target, copyIfNull);
    }
}
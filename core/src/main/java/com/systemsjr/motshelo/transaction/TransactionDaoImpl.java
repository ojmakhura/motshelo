// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 12/04/2018 18:18:01+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.motshelo.transaction;

import com.systemsjr.motshelo.transaction.vo.TransactionSearchCriteria;
import com.systemsjr.motshelo.transaction.vo.TransactionVO;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

/**
 * @see Transaction
 */
@Repository
public class TransactionDaoImpl
    extends TransactionDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toTransactionVO(
        Transaction source,
        TransactionVO target)
    {
        // TODO verify behavior of toTransactionVO
        super.toTransactionVO(source, target);
        // WARNING! No conversion for target.member (can't convert source.getMember():com.systemsjr.motshelo.member.Member to com.systemsjr.motshelo.member.vo.MemberVO
        target.setMember(getMemberDao().toMemberVO(source.getMember()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionVO toTransactionVO(final Transaction entity)
    {
        // TODO verify behavior of toTransactionVO
        return super.toTransactionVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Transaction loadTransactionFromTransactionVO(TransactionVO transactionVO)
    {
        Transaction transaction = Transaction.Factory.newInstance();
        
        if(transactionVO.getId() != null)
        {
        	transaction = this.load(transactionVO.getId());
        }
        
        return transaction;
    }

    /**
     * {@inheritDoc}
     */
    public Transaction transactionVOToEntity(TransactionVO transactionVO)
    {
        // TODO verify behavior of transactionVOToEntity
        Transaction entity = this.loadTransactionFromTransactionVO(transactionVO);
        this.transactionVOToEntity(transactionVO, entity, true);

        if(transactionVO.getMember() != null)
        {
        	entity.setMember(getMemberDao().memberVOToEntity(transactionVO.getMember()));
        }
        
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void transactionVOToEntity(
        TransactionVO source,
        Transaction target,
        boolean copyIfNull)
    {
        // TODO verify behavior of transactionVOToEntity
        super.transactionVOToEntity(source, target, copyIfNull);
    }

	@Override
	protected List<?> handleFindByCriteria(TransactionSearchCriteria searchCriteria) throws Exception 
	{
		CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<Transaction> query = builder.createQuery(Transaction.class);
    	Root<Transaction> root = query.from(Transaction.class);   
		List<Predicate> predicates = new ArrayList<Predicate>();

		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		
		query.orderBy(builder.desc(root.get("transactionDate")));
		TypedQuery<Transaction> typedQuery = getSession().createQuery(query);
		return typedQuery.getResultList();
	}
}
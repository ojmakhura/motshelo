// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 12/10/2018 08:47:25+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.motshelo;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;
import org.springframework.util.CollectionUtils;

import com.systemsjr.motshelo.instance.MotsheloInstance;
import com.systemsjr.motshelo.instance.vo.MotsheloInstanceVO;
import com.systemsjr.motshelo.member.Member;
import com.systemsjr.motshelo.member.vo.MemberVO;
import com.systemsjr.motshelo.vo.MotsheloSearchCriteria;
import com.systemsjr.motshelo.vo.MotsheloVO;

/**
 * @see Motshelo
 */
@Repository
public class MotsheloDaoImpl
    extends MotsheloDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    protected Collection<Motshelo> handleFindByCriteria(MotsheloSearchCriteria searchCriteria)
    {
    	CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<Motshelo> query = builder.createQuery(Motshelo.class);
    	Root<Motshelo> root = query.from(Motshelo.class);   
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		if(searchCriteria.getName() != null)
		{
			predicates.add(builder.like(root.<String>get("name"), "%" + searchCriteria.getName() + "%"));
		}	
		
		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		
		query.orderBy(builder.asc(root.get("name")));
		TypedQuery<Motshelo> typedQuery = getSession().createQuery(query);
		return typedQuery.getResultList();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toMotsheloVO(
        Motshelo source,
        MotsheloVO target)
    {
        // TODO verify behavior of toMotsheloVO
        super.toMotsheloVO(source, target);
        // WARNING! No conversion for target.members (can't convert source.getMembers():com.systemsjr.motshelo.member.Member to java.util.Collection
        
        Collection<Member> members = source.getMembers();
        target.setMembers(new ArrayList<MemberVO>());
        for(Member member : members)
        {
        	target.getMembers().add(getMemberDao().getBasicMemberVO(member));
        }
        
        target.setMotsheloInstances(new ArrayList<MotsheloInstanceVO>());
        for(MotsheloInstance ins : source.getMotsheloInstances())
        {
        	target.getMotsheloInstances().add(getMotsheloInstanceDao().getBasicMotsheloInstanceVO(ins));
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MotsheloVO toMotsheloVO(final Motshelo entity)
    {
        // TODO verify behavior of toMotsheloVO
        return super.toMotsheloVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Motshelo loadMotsheloFromMotsheloVO(MotsheloVO motsheloVO)
    {
        Motshelo motshelo = Motshelo.Factory.newInstance();
        
        if(motsheloVO.getId() != null)
        {
        	motshelo = this.load(motsheloVO.getId());
        }
                
        return motshelo;
    }

    /**
     * {@inheritDoc}
     */
    public Motshelo motsheloVOToEntity(MotsheloVO motsheloVO)
    {
        // TODO verify behavior of motsheloVOToEntity
        Motshelo entity = this.loadMotsheloFromMotsheloVO(motsheloVO);
        this.motsheloVOToEntity(motsheloVO, entity, true);
                
        Collection<MemberVO> memberVOs = motsheloVO.getMembers();
        entity.setMembers(new ArrayList<Member>());
        for(MemberVO memberVO : memberVOs)
        {
        	entity.addMembers(getMemberDao().getBasicMemberEntity(memberVO));
        }
        
        Collection<MotsheloInstanceVO> instances = motsheloVO.getMotsheloInstances();
        entity.setMotsheloInstances(new ArrayList<MotsheloInstance>());
        for(MotsheloInstanceVO instance : instances)
        {
        	entity.addMotsheloInstances(getMotsheloInstanceDao().getBasicMotsheloInstanceEntity(instance));
        }
        
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void motsheloVOToEntity(
        MotsheloVO source,
        Motshelo target,
        boolean copyIfNull)
    {
        // TODO verify behavior of motsheloVOToEntity
        super.motsheloVOToEntity(source, target, copyIfNull);
    }

	@Override
	protected MotsheloVO handleGetBasicMotsheloVO(Motshelo motshelo) throws Exception {
		MotsheloVO vo = new MotsheloVO();
		super.toMotsheloVO(motshelo, vo);
		return vo;
	}

	@Override
	protected Motshelo handleGetBasicMotsheloEntity(MotsheloVO motsheloVO) throws Exception {
		Motshelo entity = Motshelo.Factory.newInstance();
		entity.setId(motsheloVO.getId());
		super.motsheloVOToEntity(motsheloVO, entity, true);
		return entity;
	}
}
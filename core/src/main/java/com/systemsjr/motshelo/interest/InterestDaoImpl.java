// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 12/11/2018 17:53:28+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.motshelo.interest;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

import com.systemsjr.motshelo.interest.vo.InterestSearchCritirea;
import com.systemsjr.motshelo.interest.vo.InterestVO;
import com.systemsjr.motshelo.loan.Loan;
import com.systemsjr.motshelo.loan.vo.LoanVO;

/**
 * @see Interest
 */
@Repository
public class InterestDaoImpl
    extends InterestDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toInterestVO(
        Interest source,
        InterestVO target)
    {
        // TODO verify behavior of toInterestVO
        super.toInterestVO(source, target);
        // WARNING! No conversion for target.loan (can't convert source.getLoan():com.systemsjr.motshelo.loan.Loan to com.systemsjr.motshelo.loan.vo.LoanVO
        if(source.getLoan() != null)
        {
        	target.setLoan(getLoanDao().getBasicLoanVO(source.getLoan()));
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InterestVO toInterestVO(final Interest entity)
    {
        // TODO verify behavior of toInterestVO
        return super.toInterestVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Interest loadInterestFromInterestVO(InterestVO interestVO)
    {
    	
    	Interest interest = Interest.Factory.newInstance();
    	
    	if(interestVO.getId() != null)
    	{
    		interest = this.load(interestVO.getId());
    	}
    	
    	return interest;
    }

    /**
     * {@inheritDoc}
     */
    public Interest interestVOToEntity(InterestVO interestVO)
    {
        // TODO verify behavior of interestVOToEntity
        Interest entity = this.loadInterestFromInterestVO(interestVO);
        this.interestVOToEntity(interestVO, entity, true);
        
        if(interestVO.getLoan() != null)
        {
        	entity.setLoan(getLoanDao().getBasicLoanEntity(interestVO.getLoan()));
        }
        
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void interestVOToEntity(
        InterestVO source,
        Interest target,
        boolean copyIfNull)
    {
        // TODO verify behavior of interestVOToEntity
        super.interestVOToEntity(source, target, copyIfNull);
    }

	@Override
	protected Collection<Interest> handleFindByCriteria(InterestSearchCritirea searchCriteria) throws Exception {
		CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<Interest> query = builder.createQuery(Interest.class);
    	Root<Interest> root = query.from(Interest.class);   
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		if(searchCriteria.getLoan() != null)
		{
			Join<Interest, Loan> loanJoin = root.join("loan");
			predicates.add(builder.equal(loanJoin.<Long>get("id"), searchCriteria.getLoan().getId() ));
		}	
		
		if(searchCriteria.getType() != null)
		{
			predicates.add(builder.equal(root.<String>get("type"), searchCriteria.getType()));
		}	
		
		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		
		query.orderBy(builder.asc(root.get("type")));
		TypedQuery<Interest> typedQuery = getSession().createQuery(query);
		return typedQuery.getResultList();
	}

	@Override
	protected Interest handleGetBasicInterestEntity(InterestVO interestVO) throws Exception {

		Interest entity = Interest.Factory.newInstance();
		entity.setId(interestVO.getId());
		super.interestVOToEntity(interestVO, entity, true);
		
		entity.setLoan(getLoanDao().getBasicLoanEntity(interestVO.getLoan()));
		
		/*if(interestVO.getLoan() != null) {
			Loan loan = getLoanDao().load(interestVO.getLoan().getId());
			entity.setLoan(loan);
		}*/
		return entity;
	}

	@Override
	protected InterestVO handleGetBasicInterestVO(Interest interest) throws Exception {
		
		InterestVO vo = new InterestVO();
		super.toInterestVO(interest, vo);
		vo.setLoan(getLoanDao().getBasicLoanVO(interest.getLoan()));
		
		/*if(interest.getLoan() != null) {
			LoanVO lv = new LoanVO();
			lv.setId(interest.getLoan().getId());
			lv.setAmount(interest.getLoan().getAmount());
			vo.setLoan(lv);
		}*/
		return vo;
	}
}